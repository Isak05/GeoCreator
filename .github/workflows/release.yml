name: Automated release workflow

on:
  push:
    branches:
      - main

jobs:
  tag:
    name: Tag the release
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get version from package.json
        run: |
          sudo apt-get install -y jq
          VERSION=$(jq -r .version package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body: |
            Release ${{ env.VERSION }}
  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      - name: Configure SSH
        run: |
          # ssh setup script taken from https://gitlab.lnu.se/2dv013/content/examples/example-dockerized-web-application/-/blob/main/.gitlab-ci.yml
          # Ensure ssh-agent is installed and started, essential for managing SSH keys.
          # (Change apt-get to yum if using an RPM-based image)
          - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )

          # Start the ssh-agent in the background.
          - eval $(ssh-agent -s)

          # Add the SSH private key stored in the SSH_PRIVATE_KEY variable to the ssh-agent.
          # Using 'tr' to remove carriage return characters for compatibility with ed25519 keys.
          # Reference: https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
          - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

          # Create the .ssh directory and set the correct permissions.
          - mkdir -p ~/.ssh
          - chmod 700 ~/.ssh

          # Use ssh-keyscan to add the remote server's SSH key to the known_hosts file.
          # This prevents SSH from prompting for approval of the remote server's key.
          - ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts
          - chmod 644 ~/.ssh/known_hosts
      - name: Deploy to production server
        runs: |
          DOCKER_HOST=ssh://ci@debian docker compose -f docker-compose.prod.yml up -d --build --remove-orphans
